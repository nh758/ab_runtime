name: "Update Version"
on:
  repository_dispatch:
    type: [service_new_version]
env:
  SERVICE: ${{ github.event.client_payload.service }}
  VERSION: ${{ github.event.client_payload.version }}
  TYPE: ${{ github.event.client_payload.type }}
jobs:
  update:
    name: Update `version.json`
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set_branch.outputs.branch }}
    steps:
      - name: Set branch name
        id: set_branch
        run: echo "branch=CI/update/$SERVICE-$VERSION" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Version Update
        run: node versionUpdate.mjs service $SERVICE $VERSION

      - name: Commit Change to New Branch
        id: commit_version
        uses: EndBug/add-and-commit@v9
        with:
          message: Update ${{ env.SERVICE }} to ${{ env.VERSION }} (from GitHub Actions Workflow)
          new_branch: ${{ steps.set_branch.outputs.branch }}
          default_author: github_actions

  call-run-cy-test:
    name: Test
    needs: update
    uses: ./.github/workflows/run-cy-test.yml
    with:
      branch: ${{ needs.update.outputs.branch }}

  publish:
    name: Publish Changes
    needs: [ update, call-run-cy-test]
    if: ${{ github.event.client_payload.type == 'minor' || github.event.client_payload.type == 'patch' }}
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ needs.update.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 5

      - name: Install semver package
        run: npm i semver

      - name: Increment the Runtime Version
        uses: actions/github-script@v6
        id: increment_version
        with:
          result-encoding: string
          script: |
            const semver = require('semver');
            const type = process.env.TYPE;
            const output = [];
            const listeners = {
              stdout: (data) => output.push(data.toString()),
              stderr: (data) => console.log("stderr: %s", data)
            };
            await exec.exec("npm", ["pkg", "get", "version"], { listeners });
            console.log("op", output);
            let version = JSON.parse(output.join(""));
            console.log("v", version);
            version = semver.inc(version, type);
            console.log("v", version);
            await exec.exec("npm", ["pkg", "set", `version=${version}`]);
            core.setOutput('new_version', version);

      - name: Updates version.json
        env:
          NEW_VERSION: ${{ steps.increment_version.outputs.new_version }}
        run: node versionUpdate.mjs version ${{ env.NEW_VERSION }}

      - name: Commit Change to New Branch
        id: commit_version
        uses: EndBug/add-and-commit@v9
        env:
          NEW_VERSION: ${{ steps.increment_version.outputs.new_version }}
        with:
          message: Update version ${{ env.NEW_VERSION }}
          # tag: v${{ env.NEW_VERSION }}
          default_author: github_actions

      - name: Checkout Master
        run: git checkout master
      
      - name: Checkout ${{ env.BRANCH }}
        run: git checkout ${{ env.BRANCH }}

      - name: Rebase
        run: git rebase master

      - name: Checkout Master
        run: git checkout master

      - name: Merge to master
        env:
          COMMIT_MSG: Update ${{ env.SERVICE }} to ${{ env.VERSION }}
        run: git merge "${{ env.BRANCH }}"
        # --squash -m "${{ env.COMMIT_MSG }}"
      - name: Push
        run: git push
         
      # - name: Create release on GitHub
      #   uses: ncipollo/release-action@v1
      #   with:
      #     tag: v${{ steps.increment_version.outputs.new_version }}
      #     body: ${{ env.SERVICE }} updated to ${{ env.VERSION }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      
      # - Delete the branch

  fail:
    name: Create a PR
    needs: [ update, call-run-cy-test ]
    if: ${{ failure() || github.event.client_payload.type == 'major' }}
    runs-on: ubuntu-latest
    
    steps: 
      - name: Get Run URL
        id: run_url
        run: echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"
      - uses: actions/github-script@v6
        id: my-script
        env:
          BRANCH: ${{ needs.update.outputs.branch }}
          RUN_URL: ${{ steps.run_url.outputs.url }}
        with:
          result-encoding: string
          script: |
            const { SERVICE, VERSION, BRANCH, TYPE, RUN_URL } = process.env;
            const body = TYPE == 'major' ? 'This is a major service update. Automatic updating disabled. Review and merge manually if ready.' : `Automatic updated failed. Check the E2E tests. ${RUN_URL}`;
            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Update ${SERVICE} to ${VERSION} (from GitHub Actions Workflow)`,
              base: "master",
              head: BRANCH,
              body,
            })
